{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","newTask","setnewTask","tasks","setTasks","taskInput","useRef","addTask","name","newTasks","done","className","onSubmit","e","preventDefault","current","focus","type","onChange","target","value","ref","autoFocus","map","t","i","style","textDecoration","onClick","toggleDoneTask","icon","faCut","faCheck","splice","removeTask","faTrashAlt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAoFeA,MA1Ef,WAEE,MAA8BC,mBAAiB,IAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KAEA,EAA0BF,mBAAkB,IAA5C,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAYC,iBAAyB,MAWrCC,EAAU,SAACC,GACf,IAAMC,EAAiB,sBAAON,GAAP,CAAc,CAACK,KAAOA,EAAME,MAAM,KACzDN,EAASK,IAeX,OACE,qBAAKE,UAAU,gBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,uBAAMC,SA/BG,SAACC,GAAoB,IAAD,EACvCA,EAAEC,iBACFP,EAAQN,GACRC,EAAW,IACX,UAAAG,EAAUU,eAAV,SAAmBC,SA2BT,UACE,uBACEC,KAAK,OACLC,SAAU,SAAAL,GAAC,OAAIX,EAAWW,EAAEM,OAAOC,QACnCA,MAAOnB,EACPU,UAAU,eACVU,IAAKhB,EACLiB,WAAS,IACX,qBAAKX,UAAU,eAAf,SACA,wBAAQA,UAAU,iCAAlB,2BAMJR,EAAMoB,KAAI,SAACC,EAAUC,GAAX,OACR,sBAAKd,UAAU,sBAAf,UACE,oBAAIe,MAAO,CAACC,eAAgBH,EAAEd,KAAO,eAAiB,IAAtD,SAA4Dc,EAAEhB,OAC9D,gCACE,wBAAQG,UAAU,oBAAoBiB,QAAS,kBArCxC,SAACH,GACtB,IAAMhB,EAAiB,YAAON,GAC9BM,EAASgB,GAAGf,MAAQD,EAASgB,GAAGf,KAChCN,EAASK,GAkC0DoB,CAAeJ,IAApE,SACGD,EAAEd,KAAO,cAAC,IAAD,CAAiBoB,KAAMC,MAAY,cAAC,IAAD,CAAiBD,KAAME,QAEtE,wBAAQrB,UAAU,iBAAiBiB,QAAS,kBAlCzC,SAACH,GAClB,IAAMhB,EAAiB,YAAON,GAC9BM,EAASwB,OAAOR,EAAE,GAClBrB,EAASK,GA+BuDyB,CAAWT,IAA7D,SACE,cAAC,IAAD,CAAiBK,KAAMK,aAPaV,cCpDzCW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3d58879f.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCut, faCheck, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\ninterface ITask {\n  name: string;\n  done: boolean;\n}\n\nfunction App(): JSX.Element {\n  //create new task\n  const [newTask, setnewTask] = useState<string>('')\n  //add a new task in the list\n  const [tasks, setTasks] = useState<ITask[]>([])\n  //reference in the input\n  const taskInput = useRef<HTMLInputElement>(null);\n\n  //function for create new task\n  const handleSubmit = (e: FormElement) => {\n    e.preventDefault();\n    addTask(newTask)\n    setnewTask('');\n    taskInput.current?.focus();\n  }\n\n  //function for add a new task in the list\n  const addTask = (name: string) => {\n    const newTasks: ITask[] = [...tasks, {name : name, done: false}]\n    setTasks(newTasks)\n  }\n\n  const toggleDoneTask = (i: number): void => {\n    const newTasks: ITask[] = [...tasks];\n    newTasks[i].done = !newTasks[i].done;\n    setTasks(newTasks);\n  }\n\n  const removeTask = (i: number): void => {\n    const newTasks: ITask[] = [...tasks];\n    newTasks.splice(i,1);\n    setTasks(newTasks);\n  }\n\n  return (\n    <div className=\"container p-4\">\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <input\n                  type=\"text\"\n                  onChange={e => setnewTask(e.target.value)}\n                  value={newTask}\n                  className=\"form-control\"\n                  ref={taskInput}\n                  autoFocus />\n                <div className=\"d-grid gap-2\">\n                <button className=\"btn btn-success btn-block mt-2\">Task</button>\n                </div>\n              </form>\n            </div>\n          </div>\n          {\n            tasks.map((t: ITask, i: number) => (\n              <div className=\"card card-body mt-2\" key={i}>\n                <h2 style={{textDecoration: t.done ? 'line-through' : ''}}>{t.name}</h2>\n                <div>\n                  <button className='btn btn-secondary' onClick={() => toggleDoneTask(i)}>\n                    {t.done ? <FontAwesomeIcon icon={faCut} /> : <FontAwesomeIcon icon={faCheck} />}\n                  </button>\n                  <button className='btn btn-danger' onClick={() => removeTask(i)}>\n                    <FontAwesomeIcon icon={faTrashAlt} />\n                  </button>\n                </div>\n              </div>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootswatch/dist/darkly/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}